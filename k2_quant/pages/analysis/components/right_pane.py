"""
Right Pane Component - Conversational AI

Contains AI chat interface for strategy development.
Save as: k2_quant/pages/analysis/components/right_pane.py
"""

from typing import Dict, Any, Optional
from datetime import datetime

from PyQt6.QtWidgets import (QFrame, QVBoxLayout, QHBoxLayout, QTextEdit,
                             QLineEdit, QPushButton, QLabel, QWidget)
from PyQt6.QtCore import Qt, pyqtSignal

from k2_quant.utilities.logger import k2_logger
from k2_quant.pages.analysis.widgets.ai_chat_widget import AIChatWidget


class RightPaneWidget(QFrame):
    """Right pane with AI chat interface"""
    
    # Signals
    message_sent = pyqtSignal(str)  # message
    strategy_generated = pyqtSignal(str, str)  # name, code
    projection_requested = pyqtSignal(dict)  # parameters
    
    def __init__(self):
        super().__init__()
        self.setFixedWidth(513)
        self.setObjectName("rightPane")
        
        self.current_context = None
        self.conversation_history = []
        
        self.init_ui()
        self.setup_styling()
        self.show_welcome_message()
    
    def init_ui(self):
        """Initialize the UI"""
        layout = QVBoxLayout()
        layout.setContentsMargins(15, 15, 15, 15)
        layout.setSpacing(10)
        self.setLayout(layout)
        
        # Header
        ai_label = QLabel("CONVERSATIONAL AI")
        ai_label.setObjectName("sectionTitle")
        layout.addWidget(ai_label)
        
        # Embedded AI chat widget (streams via AIChatService)
        self.chat = AIChatWidget(self)
        layout.addWidget(self.chat)

        # Wire widget signals to pane-level signals/handlers
        self._wire_widget_signals()
    
    def show_welcome_message(self):
        """Show welcome message"""
        # Delegate welcome rendering to the embedded widget
        pass

    def _wire_widget_signals(self):
        """Bridge widget signals to existing right pane signals/handlers."""
        # Mirror user messages if higher-level code is listening
        self.chat.message_sent.connect(self.message_sent.emit)
        # Strategy code generated by AI ([STRATEGY])
        self.chat.code_generated.connect(self._on_code_generated)
        # Optional: treat QUERY as a projection/lookup request payload
        try:
            self.chat.query_generated.connect(self._on_query_generated)
        except Exception:
            pass

    def _on_code_generated(self, code: str, name: str):
        self.strategy_generated.emit(name, code)

    def _on_query_generated(self, code: str):
        # Reuse existing signal channel with a typed payload
        self.projection_requested.emit({'type': 'QUERY', 'code': code})
    
    def set_data_context(self, context: Dict[str, Any]):
        """Set the data context for AI"""
        self.current_context = context
        
        # Show in chat
        symbol = context.get('symbol')
        records = context.get('records')

        # Forward dataset to embedded widget for grounding and service context
        df = context.get('df')
        metadata = {
            'symbol': symbol,
            'total_records': records,
            'date_range': context.get('date_range'),
            'timespan': context.get('timespan'),
            'range': context.get('range'),
        }
        if df is not None:
            self.chat.set_data_context(df, metadata)
    
    def clear_chat(self):
        """Clear chat history"""
        self.chat_display.clear()
        self.conversation_history.clear()
        self.show_welcome_message()
        k2_logger.info("Chat cleared", "AI_CHAT")
    
    def setup_styling(self):
        """Apply styling to the pane"""
        self.setStyleSheet("""
            #rightPane {
                background-color: #0f0f0f;
                border-left: 1px solid #1a1a1a;
            }
            
            #sectionTitle {
                font-size: 11px;
                text-transform: uppercase;
                letter-spacing: 1px;
                color: #999;
                font-weight: 600;
                background-color: #1a1a1a;
                padding: 5px 10px;
                border-radius: 3px;
            }
            
            #chatDisplay {
                background-color: #0a0a0a;
                color: #ccc;
                border: 1px solid #1a1a1a;
                border-radius: 4px;
                padding: 10px;
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 13px;
                line-height: 1.6;
            }
            
            #chatInput {
                background-color: #1a1a1a;
                color: #fff;
                border: 1px solid #2a2a2a;
                padding: 8px;
                border-radius: 3px;
                font-size: 13px;
            }
            
            #sendBtn {
                background-color: #1a1a1a;
                color: #fff;
                border: 1px solid #2a2a2a;
                padding: 8px 15px;
                border-radius: 3px;
                font-weight: bold;
            }
            
            #sendBtn:hover {
                background-color: #2a2a2a;
            }
        """)
    
    def cleanup(self):
        """Cleanup resources"""
        self.clear_chat()
        self.current_context = None