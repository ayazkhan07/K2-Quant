version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: k2_quant_postgres
    environment:
      POSTGRES_DB: k2quant_web
      POSTGRES_USER: k2quant
      POSTGRES_PASSWORD: k2quant_secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - k2_quant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U k2quant"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: k2_quant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - k2_quant_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: k2_quant_backend
    environment:
      DATABASE_URL: postgresql://k2quant:k2quant_secure_password@postgres:5432/k2quant_web
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-here}
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:80"]'
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - k2_quant_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker (Background Tasks)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: k2_quant_celery_worker
    environment:
      DATABASE_URL: postgresql://k2quant:k2quant_secure_password@postgres:5432/k2quant_web
      REDIS_URL: redis://redis:6379/0
      POLYGON_API_KEY: ${POLYGON_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - k2_quant_network
    command: celery -A app.celery_app worker --loglevel=info

  # Celery Beat (Scheduled Tasks)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: k2_quant_celery_beat
    environment:
      DATABASE_URL: postgresql://k2quant:k2quant_secure_password@postgres:5432/k2quant_web
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - k2_quant_network
    command: celery -A app.celery_app beat --loglevel=info

  # Flower (Celery Monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: k2_quant_flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker
    networks:
      - k2_quant_network
    command: celery -A app.celery_app flower --port=5555

  # Frontend (React)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://localhost:8000
        REACT_APP_WS_URL: ws://localhost:8000
    container_name: k2_quant_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - k2_quant_network
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    command: npm start

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: k2_quant_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - k2_quant_network

  # Agent Coordinator (Optional)
  agent_coordinator:
    build:
      context: ./backend
      dockerfile: Dockerfile.agents
    container_name: k2_quant_agents
    environment:
      DATABASE_URL: postgresql://k2quant:k2quant_secure_password@postgres:5432/k2quant_web
      REDIS_URL: redis://redis:6379/0
      ENABLE_AGENTS: "true"
    volumes:
      - ./agents:/app/agents
      - agent_logs:/app/logs
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - k2_quant_network
    command: python -m agents.coordinator

networks:
  k2_quant_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  backend_logs:
  agent_logs:
  nginx_logs: